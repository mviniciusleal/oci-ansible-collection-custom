#!/usr/bin/python
# Copyright (c) 2020, 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_cloud_migrations_migration_asset_actions
short_description: Perform actions on a MigrationAsset resource in Oracle Cloud Infrastructure
description:
    - Perform actions on a MigrationAsset resource in Oracle Cloud Infrastructure
    - For I(action=refresh), refreshes the migration asset with the migration asset ID.
    - For I(action=start_asset_replication), starts replication for the asset with the migration asset ID.
version_added: "2.9.0"
author: Oracle (@oracle)
options:
    migration_asset_id:
        description:
            - Unique migration asset identifier
        type: str
        aliases: ["id"]
        required: true
    action:
        description:
            - The action to perform on the MigrationAsset.
        type: str
        required: true
        choices:
            - "refresh"
            - "start_asset_replication"
extends_documentation_fragment: [ oracle.oci.oracle, oracle.oci.oracle_wait_options ]
"""

EXAMPLES = """
- name: Perform action refresh on migration_asset
  oci_cloud_migrations_migration_asset_actions:
    # required
    migration_asset_id: "ocid1.migrationasset.oc1..xxxxxxEXAMPLExxxxxx"
    action: refresh

- name: Perform action start_asset_replication on migration_asset
  oci_cloud_migrations_migration_asset_actions:
    # required
    migration_asset_id: "ocid1.migrationasset.oc1..xxxxxxEXAMPLExxxxxx"
    action: start_asset_replication

"""

RETURN = """
migration_asset:
    description:
        - Details of the MigrationAsset resource acted upon by the current operation
    returned: on success
    type: complex
    contains:
        id:
            description:
                - Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
            returned: on success
            type: str
            sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
        type:
            description:
                - The type of asset referenced for inventory.
            returned: on success
            type: str
            sample: type_example
        display_name:
            description:
                - A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
            returned: on success
            type: str
            sample: display_name_example
        compartment_id:
            description:
                - Compartment Identifier
            returned: on success
            type: str
            sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
        lifecycle_state:
            description:
                - The current state of the migration asset.
            returned: on success
            type: str
            sample: CREATING
        lifecycle_details:
            description:
                - A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed
                  state.
            returned: on success
            type: str
            sample: lifecycle_details_example
        time_created:
            description:
                - The time when the migration asset was created. An RFC3339 formatted datetime string.
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        time_updated:
            description:
                - The time when the migration asset was updated. An RFC3339 formatted datetime string.
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        migration_id:
            description:
                - OCID of the associated migration.
            returned: on success
            type: str
            sample: "ocid1.migration.oc1..xxxxxxEXAMPLExxxxxx"
        snapshots:
            description:
                - "Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots.
                  Example: `{\\"bar-key\\": \\"value\\"}`"
            returned: on success
            type: complex
            contains:
                uuid:
                    description:
                        - ID of the vCenter disk obtained from Inventory.
                    returned: on success
                    type: str
                    sample: uuid_example
                volume_id:
                    description:
                        - ID of the hydration server volume
                    returned: on success
                    type: str
                    sample: "ocid1.volume.oc1..xxxxxxEXAMPLExxxxxx"
                volume_type:
                    description:
                        - The hydration server volume type
                    returned: on success
                    type: str
                    sample: BOOT
                unmodified_volume_id:
                    description:
                        - ID of the unmodified volume
                    returned: on success
                    type: str
                    sample: "ocid1.unmodifiedvolume.oc1..xxxxxxEXAMPLExxxxxx"
        parent_snapshot:
            description:
                - The parent snapshot of the migration asset to be used by the replication task.
            returned: on success
            type: str
            sample: parent_snapshot_example
        source_asset_data:
            description:
                - "Key-value pair representing asset metadata keys and values scoped to a namespace.
                  Example: `{\\"bar-key\\": \\"value\\"}`"
            returned: on success
            type: dict
            sample: {}
        notifications:
            description:
                - List of notifications
            returned: on success
            type: list
            sample: []
        source_asset_id:
            description:
                - OCID that is referenced to an asset for an inventory.
            returned: on success
            type: str
            sample: "ocid1.sourceasset.oc1..xxxxxxEXAMPLExxxxxx"
        replication_schedule_id:
            description:
                - Replication schedule identifier
            returned: on success
            type: str
            sample: "ocid1.replicationschedule.oc1..xxxxxxEXAMPLExxxxxx"
        availability_domain:
            description:
                - Availability domain
            returned: on success
            type: str
            sample: Uocm:PHX-AD-1
        replication_compartment_id:
            description:
                - Replication compartment identifier
            returned: on success
            type: str
            sample: "ocid1.replicationcompartment.oc1..xxxxxxEXAMPLExxxxxx"
        tenancy_id:
            description:
                - Tenancy identifier
            returned: on success
            type: str
            sample: "ocid1.tenancy.oc1..xxxxxxEXAMPLExxxxxx"
        snap_shot_bucket_name:
            description:
                - Name of snapshot bucket
            returned: on success
            type: str
            sample: snap_shot_bucket_name_example
        depended_on_by:
            description:
                - List of migration assets that depend on the asset.
            returned: on success
            type: list
            sample: []
        depends_on:
            description:
                - List of migration assets that depends on the asset.
            returned: on success
            type: list
            sample: []
    sample: {
        "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
        "type": "type_example",
        "display_name": "display_name_example",
        "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
        "lifecycle_state": "CREATING",
        "lifecycle_details": "lifecycle_details_example",
        "time_created": "2013-10-20T19:20:30+01:00",
        "time_updated": "2013-10-20T19:20:30+01:00",
        "migration_id": "ocid1.migration.oc1..xxxxxxEXAMPLExxxxxx",
        "snapshots": {
            "uuid": "uuid_example",
            "volume_id": "ocid1.volume.oc1..xxxxxxEXAMPLExxxxxx",
            "volume_type": "BOOT",
            "unmodified_volume_id": "ocid1.unmodifiedvolume.oc1..xxxxxxEXAMPLExxxxxx"
        },
        "parent_snapshot": "parent_snapshot_example",
        "source_asset_data": {},
        "notifications": [],
        "source_asset_id": "ocid1.sourceasset.oc1..xxxxxxEXAMPLExxxxxx",
        "replication_schedule_id": "ocid1.replicationschedule.oc1..xxxxxxEXAMPLExxxxxx",
        "availability_domain": "Uocm:PHX-AD-1",
        "replication_compartment_id": "ocid1.replicationcompartment.oc1..xxxxxxEXAMPLExxxxxx",
        "tenancy_id": "ocid1.tenancy.oc1..xxxxxxEXAMPLExxxxxx",
        "snap_shot_bucket_name": "snap_shot_bucket_name_example",
        "depended_on_by": [],
        "depends_on": []
    }
"""

from ansible_collections.oracle.oci.plugins.module_utils import (
    oci_common_utils,
    oci_wait_utils,
)
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIActionsHelperBase,
    OCIAnsibleModule,
    get_custom_class,
)

try:
    from oci.cloud_migrations import MigrationClient

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class MigrationAssetActionsHelperGen(OCIActionsHelperBase):
    """
    Supported actions:
        refresh
        start_asset_replication
    """

    @staticmethod
    def get_module_resource_id_param():
        return "migration_asset_id"

    def get_module_resource_id(self):
        return self.module.params.get("migration_asset_id")

    def get_get_fn(self):
        return self.client.get_migration_asset

    def get_resource(self):
        return oci_common_utils.call_with_backoff(
            self.client.get_migration_asset,
            migration_asset_id=self.module.params.get("migration_asset_id"),
        )

    def refresh(self):
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.refresh_migration_asset,
            call_fn_args=(),
            call_fn_kwargs=dict(
                migration_asset_id=self.module.params.get("migration_asset_id"),
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation="{0}_{1}".format(
                self.module.params.get("action").upper(),
                oci_common_utils.ACTION_OPERATION_KEY,
            ),
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def start_asset_replication(self):
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.start_asset_replication,
            call_fn_args=(),
            call_fn_kwargs=dict(
                migration_asset_id=self.module.params.get("migration_asset_id"),
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation="{0}_{1}".format(
                self.module.params.get("action").upper(),
                oci_common_utils.ACTION_OPERATION_KEY,
            ),
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )


MigrationAssetActionsHelperCustom = get_custom_class(
    "MigrationAssetActionsHelperCustom"
)


class ResourceHelper(MigrationAssetActionsHelperCustom, MigrationAssetActionsHelperGen):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec(
        supports_create=False, supports_wait=True
    )
    module_args.update(
        dict(
            migration_asset_id=dict(aliases=["id"], type="str", required=True),
            action=dict(
                type="str",
                required=True,
                choices=["refresh", "start_asset_replication"],
            ),
        )
    )

    module = OCIAnsibleModule(argument_spec=module_args, supports_check_mode=True)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_helper = ResourceHelper(
        module=module,
        resource_type="migration_asset",
        service_client_class=MigrationClient,
        namespace="cloud_migrations",
    )

    result = resource_helper.perform_action(module.params.get("action"))

    module.exit_json(**result)


if __name__ == "__main__":
    main()
