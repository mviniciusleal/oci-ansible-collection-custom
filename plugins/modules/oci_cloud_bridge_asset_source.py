#!/usr/bin/python
# Copyright (c) 2020, 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_cloud_bridge_asset_source
short_description: Manage an AssetSource resource in Oracle Cloud Infrastructure
description:
    - This module allows the user to create, update and delete an AssetSource resource in Oracle Cloud Infrastructure
    - For I(state=present), creates an asset source.
    - "This resource has the following action operations in the M(oracle.oci.oci_cloud_bridge_asset_source_actions) module: change_compartment, refresh."
version_added: "2.9.0"
author: Oracle (@oracle)
options:
    compartment_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment for the resource.
            - Required for create using I(state=present).
            - Required for update when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
            - Required for delete when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
        type: str
    environment_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the environment.
            - Required for create using I(state=present).
        type: str
    inventory_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the inventory that will contain created assets.
            - Required for create using I(state=present).
        type: str
    type:
        description:
            - Asset source type.
            - Required for create using I(state=present), update using I(state=present) with asset_source_id present.
        type: str
        choices:
            - "VMWARE"
    display_name:
        description:
            - A user-friendly name for the asset source. Does not have to be unique, and it's mutable.
              Avoid entering confidential information. The name is generated by the service if it is not
              explicitly provided.
            - Required for create, update, delete when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
            - This parameter is updatable when C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["name"]
    assets_compartment_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment that is going to be used to create assets.
            - Required for create using I(state=present).
            - This parameter is updatable.
            - Applicable when type is 'VMWARE'
        type: str
    freeform_tags:
        description:
            - "The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no
              predefined name, type, or namespace/scope. For more information, see L(Resource
              Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
              Example: `{\\"Department\\": \\"Finance\\"}`"
            - This parameter is updatable.
        type: dict
    defined_tags:
        description:
            - "The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces.
              For more information, see L(Resource Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
              Example: `{\\"Operations\\": {\\"CostCenter\\": \\"42\\"}}`"
            - This parameter is updatable.
        type: dict
    system_tags:
        description:
            - "The system tags associated with this resource, if any. The system tags are set by Oracle cloud infrastructure services. Each key is predefined
              and scoped to namespaces.
              For more information, see L(Resource Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
              Example: `{orcl-cloud: {free-tier-retain: true}}`"
            - This parameter is updatable.
        type: dict
    vcenter_endpoint:
        description:
            - Endpoint for VMware asset discovery and replication in the form of ```https://<host>:<port>/sdk```
            - Required for create using I(state=present).
            - This parameter is updatable.
            - Applicable when type is 'VMWARE'
        type: str
    discovery_credentials:
        description:
            - ""
            - Required for create using I(state=present).
            - This parameter is updatable.
            - Applicable when type is 'VMWARE'
        type: dict
        suboptions:
            type:
                description:
                    - Authentication type
                type: str
                choices:
                    - "BASIC"
                required: true
            secret_id:
                description:
                    - "The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the secret in a vault.
                      If the the type of the credentials is BASIC`, the secret must contain the username and
                      password in JSON format, which is in the form of `{ \\"username\\": \\"<VMwareUser>\\", \\"password\\": \\"<VMwarePassword>\\" }`."
                type: str
                required: true
    replication_credentials:
        description:
            - ""
            - This parameter is updatable.
        type: dict
        suboptions:
            type:
                description:
                    - Authentication type
                type: str
                choices:
                    - "BASIC"
                required: true
            secret_id:
                description:
                    - "The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the secret in a vault.
                      If the the type of the credentials is BASIC`, the secret must contain the username and
                      password in JSON format, which is in the form of `{ \\"username\\": \\"<VMwareUser>\\", \\"password\\": \\"<VMwarePassword>\\" }`."
                type: str
                required: true
    are_historical_metrics_collected:
        description:
            - Flag indicating whether historical metrics are collected for assets, originating from this asset source.
            - This parameter is updatable.
        type: bool
    are_realtime_metrics_collected:
        description:
            - Flag indicating whether real-time metrics are collected for assets, originating from this asset source.
            - This parameter is updatable.
        type: bool
    discovery_schedule_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the discovery schedule that is going to be attached to the
              created asset.
            - This parameter is updatable.
        type: str
    asset_source_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the asset source.
            - Required for update using I(state=present) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
            - Required for delete using I(state=absent) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["id"]
    state:
        description:
            - The state of the AssetSource.
            - Use I(state=present) to create or update an AssetSource.
            - Use I(state=absent) to delete an AssetSource.
        type: str
        required: false
        default: 'present'
        choices: ["present", "absent"]
extends_documentation_fragment: [ oracle.oci.oracle, oracle.oci.oracle_creatable_resource, oracle.oci.oracle_wait_options ]
"""

EXAMPLES = """
- name: Create asset_source with type = VMWARE
  oci_cloud_bridge_asset_source:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    environment_id: "ocid1.environment.oc1..xxxxxxEXAMPLExxxxxx"
    inventory_id: "ocid1.inventory.oc1..xxxxxxEXAMPLExxxxxx"
    type: VMWARE

    # optional
    display_name: display_name_example
    assets_compartment_id: "ocid1.assetscompartment.oc1..xxxxxxEXAMPLExxxxxx"
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}
    system_tags: null
    vcenter_endpoint: vcenter_endpoint_example
    discovery_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    replication_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    are_historical_metrics_collected: true
    are_realtime_metrics_collected: true
    discovery_schedule_id: "ocid1.discoveryschedule.oc1..xxxxxxEXAMPLExxxxxx"

- name: Update asset_source with type = VMWARE
  oci_cloud_bridge_asset_source:
    # required
    type: VMWARE

    # optional
    display_name: display_name_example
    assets_compartment_id: "ocid1.assetscompartment.oc1..xxxxxxEXAMPLExxxxxx"
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}
    system_tags: null
    vcenter_endpoint: vcenter_endpoint_example
    discovery_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    replication_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    are_historical_metrics_collected: true
    are_realtime_metrics_collected: true
    discovery_schedule_id: "ocid1.discoveryschedule.oc1..xxxxxxEXAMPLExxxxxx"

- name: Update asset_source using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set) with type = VMWARE
  oci_cloud_bridge_asset_source:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    type: VMWARE

    # optional
    display_name: display_name_example
    assets_compartment_id: "ocid1.assetscompartment.oc1..xxxxxxEXAMPLExxxxxx"
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}
    system_tags: null
    vcenter_endpoint: vcenter_endpoint_example
    discovery_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    replication_credentials:
      # required
      type: BASIC
      secret_id: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
    are_historical_metrics_collected: true
    are_realtime_metrics_collected: true
    discovery_schedule_id: "ocid1.discoveryschedule.oc1..xxxxxxEXAMPLExxxxxx"

- name: Delete asset_source
  oci_cloud_bridge_asset_source:
    # required
    asset_source_id: "ocid1.assetsource.oc1..xxxxxxEXAMPLExxxxxx"
    state: absent

- name: Delete asset_source using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_cloud_bridge_asset_source:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    display_name: display_name_example
    state: absent

"""

RETURN = """
asset_source:
    description:
        - Details of the AssetSource resource acted upon by the current operation
    returned: on success
    type: complex
    contains:
        type:
            description:
                - The type of asset source. Indicates external origin of the assets that are read by assigning this asset source.
            returned: on success
            type: str
            sample: VMWARE
        id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the resource.
            returned: on success
            type: str
            sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
        compartment_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment for the resource.
            returned: on success
            type: str
            sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
        display_name:
            description:
                - A user-friendly name for the asset source. Does not have to be unique, and it's mutable.
                  Avoid entering confidential information.
            returned: on success
            type: str
            sample: display_name_example
        environment_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the environment.
            returned: on success
            type: str
            sample: "ocid1.environment.oc1..xxxxxxEXAMPLExxxxxx"
        inventory_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the inventory that will contain created assets.
            returned: on success
            type: str
            sample: "ocid1.inventory.oc1..xxxxxxEXAMPLExxxxxx"
        assets_compartment_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment that is going to be used to create
                  assets.
            returned: on success
            type: str
            sample: "ocid1.assetscompartment.oc1..xxxxxxEXAMPLExxxxxx"
        discovery_schedule_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of an attached discovery schedule.
            returned: on success
            type: str
            sample: "ocid1.discoveryschedule.oc1..xxxxxxEXAMPLExxxxxx"
        lifecycle_state:
            description:
                - The current state of the asset source.
            returned: on success
            type: str
            sample: CREATING
        lifecycle_details:
            description:
                - The detailed state of the asset source.
            returned: on success
            type: str
            sample: lifecycle_details_example
        time_created:
            description:
                - The time when the asset source was created in the RFC3339 format.
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        time_updated:
            description:
                - The point in time that the asset source was last updated in the RFC3339 format.
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        freeform_tags:
            description:
                - "The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no
                  predefined name, type, or namespace/scope. For more information, see L(Resource
                  Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
                  Example: `{\\"Department\\": \\"Finance\\"}`"
            returned: on success
            type: dict
            sample: {'Department': 'Finance'}
        defined_tags:
            description:
                - "The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces.
                  For more information, see L(Resource Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
                  Example: `{\\"Operations\\": {\\"CostCenter\\": \\"42\\"}}`"
            returned: on success
            type: dict
            sample: {'Operations': {'CostCenter': 'US'}}
        system_tags:
            description:
                - "The system tags associated with this resource, if any. The system tags are set by Oracle cloud infrastructure services. Each key is
                  predefined and scoped to namespaces.
                  For more information, see L(Resource Tags,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
                  Example: `{orcl-cloud: {free-tier-retain: true}}`"
            returned: on success
            type: dict
            sample: {}
        vcenter_endpoint:
            description:
                - Endpoint for VMware asset discovery and replication in the form of ```https://<host>:<port>/sdk```
            returned: on success
            type: str
            sample: vcenter_endpoint_example
        discovery_credentials:
            description:
                - ""
            returned: on success
            type: complex
            contains:
                type:
                    description:
                        - Authentication type
                    returned: on success
                    type: str
                    sample: BASIC
                secret_id:
                    description:
                        - "The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the secret in a vault.
                          If the the type of the credentials is BASIC`, the secret must contain the username and
                          password in JSON format, which is in the form of `{ \\"username\\": \\"<VMwareUser>\\", \\"password\\": \\"<VMwarePassword>\\" }`."
                    returned: on success
                    type: str
                    sample: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
        replication_credentials:
            description:
                - ""
            returned: on success
            type: complex
            contains:
                type:
                    description:
                        - Authentication type
                    returned: on success
                    type: str
                    sample: BASIC
                secret_id:
                    description:
                        - "The L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the secret in a vault.
                          If the the type of the credentials is BASIC`, the secret must contain the username and
                          password in JSON format, which is in the form of `{ \\"username\\": \\"<VMwareUser>\\", \\"password\\": \\"<VMwarePassword>\\" }`."
                    returned: on success
                    type: str
                    sample: "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
        are_historical_metrics_collected:
            description:
                - Flag indicating whether historical metrics are collected for assets, originating from this asset source.
            returned: on success
            type: bool
            sample: true
        are_realtime_metrics_collected:
            description:
                - Flag indicating whether real-time metrics are collected for assets, originating from this asset source.
            returned: on success
            type: bool
            sample: true
    sample: {
        "type": "VMWARE",
        "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
        "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
        "display_name": "display_name_example",
        "environment_id": "ocid1.environment.oc1..xxxxxxEXAMPLExxxxxx",
        "inventory_id": "ocid1.inventory.oc1..xxxxxxEXAMPLExxxxxx",
        "assets_compartment_id": "ocid1.assetscompartment.oc1..xxxxxxEXAMPLExxxxxx",
        "discovery_schedule_id": "ocid1.discoveryschedule.oc1..xxxxxxEXAMPLExxxxxx",
        "lifecycle_state": "CREATING",
        "lifecycle_details": "lifecycle_details_example",
        "time_created": "2013-10-20T19:20:30+01:00",
        "time_updated": "2013-10-20T19:20:30+01:00",
        "freeform_tags": {'Department': 'Finance'},
        "defined_tags": {'Operations': {'CostCenter': 'US'}},
        "system_tags": {},
        "vcenter_endpoint": "vcenter_endpoint_example",
        "discovery_credentials": {
            "type": "BASIC",
            "secret_id": "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
        },
        "replication_credentials": {
            "type": "BASIC",
            "secret_id": "ocid1.secret.oc1..xxxxxxEXAMPLExxxxxx"
        },
        "are_historical_metrics_collected": true,
        "are_realtime_metrics_collected": true
    }
"""

from ansible_collections.oracle.oci.plugins.module_utils import (
    oci_common_utils,
    oci_wait_utils,
)
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIResourceHelperBase,
    get_custom_class,
    OCIAnsibleModule,
)

try:
    from oci.cloud_bridge import DiscoveryClient
    from oci.cloud_bridge.models import CreateAssetSourceDetails
    from oci.cloud_bridge.models import UpdateAssetSourceDetails

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class AssetSourceHelperGen(OCIResourceHelperBase):
    """Supported operations: create, update, get, list and delete"""

    def get_possible_entity_types(self):
        return super(AssetSourceHelperGen, self).get_possible_entity_types() + [
            "assetsource",
            "assetsources",
            "cloudBridgeassetsource",
            "cloudBridgeassetsources",
            "assetsourceresource",
            "assetsourcesresource",
            "cloudbridge",
        ]

    def get_module_resource_id_param(self):
        return "asset_source_id"

    def get_module_resource_id(self):
        return self.module.params.get("asset_source_id")

    def get_get_fn(self):
        return self.client.get_asset_source

    def get_get_model_from_summary_model(self, summary_model):
        return oci_common_utils.call_with_backoff(
            self.client.get_asset_source, asset_source_id=summary_model.id,
        ).data

    def get_resource(self):
        return oci_common_utils.call_with_backoff(
            self.client.get_asset_source,
            asset_source_id=self.module.params.get("asset_source_id"),
        )

    def get_required_kwargs_for_list(self):
        required_list_method_params = [
            "compartment_id",
        ]

        return dict(
            (param, self.module.params[param]) for param in required_list_method_params
        )

    def get_optional_kwargs_for_list(self):
        optional_list_method_params = ["asset_source_id", "display_name"]

        return dict(
            (param, self.module.params[param])
            for param in optional_list_method_params
            if self.module.params.get(param) is not None
            and (
                self._use_name_as_identifier()
                or (
                    not self.module.params.get("key_by")
                    or param in self.module.params.get("key_by")
                )
            )
        )

    def list_resources(self):

        required_kwargs = self.get_required_kwargs_for_list()
        optional_kwargs = self.get_optional_kwargs_for_list()
        kwargs = oci_common_utils.merge_dicts(required_kwargs, optional_kwargs)
        return oci_common_utils.list_all_resources(
            self.client.list_asset_sources, **kwargs
        )

    def get_create_model_class(self):
        return CreateAssetSourceDetails

    def create_resource(self):
        create_details = self.get_create_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.create_asset_source,
            call_fn_args=(),
            call_fn_kwargs=dict(create_asset_source_details=create_details,),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.CREATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def get_update_model_class(self):
        return UpdateAssetSourceDetails

    def update_resource(self):
        update_details = self.get_update_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.update_asset_source,
            call_fn_args=(),
            call_fn_kwargs=dict(
                asset_source_id=self.module.params.get("asset_source_id"),
                update_asset_source_details=update_details,
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.UPDATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def delete_resource(self):
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.delete_asset_source,
            call_fn_args=(),
            call_fn_kwargs=dict(
                asset_source_id=self.module.params.get("asset_source_id"),
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.DELETE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )


AssetSourceHelperCustom = get_custom_class("AssetSourceHelperCustom")


class ResourceHelper(AssetSourceHelperCustom, AssetSourceHelperGen):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec(
        supports_create=True, supports_wait=True
    )
    module_args.update(
        dict(
            compartment_id=dict(type="str"),
            environment_id=dict(type="str"),
            inventory_id=dict(type="str"),
            type=dict(type="str", choices=["VMWARE"]),
            display_name=dict(aliases=["name"], type="str"),
            assets_compartment_id=dict(type="str"),
            freeform_tags=dict(type="dict"),
            defined_tags=dict(type="dict"),
            system_tags=dict(type="dict"),
            vcenter_endpoint=dict(type="str"),
            discovery_credentials=dict(
                type="dict",
                options=dict(
                    type=dict(type="str", required=True, choices=["BASIC"]),
                    secret_id=dict(type="str", required=True),
                ),
            ),
            replication_credentials=dict(
                type="dict",
                options=dict(
                    type=dict(type="str", required=True, choices=["BASIC"]),
                    secret_id=dict(type="str", required=True),
                ),
            ),
            are_historical_metrics_collected=dict(type="bool"),
            are_realtime_metrics_collected=dict(type="bool"),
            discovery_schedule_id=dict(type="str"),
            asset_source_id=dict(aliases=["id"], type="str"),
            state=dict(type="str", default="present", choices=["present", "absent"]),
        )
    )

    module = OCIAnsibleModule(argument_spec=module_args, supports_check_mode=True)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_helper = ResourceHelper(
        module=module,
        resource_type="asset_source",
        service_client_class=DiscoveryClient,
        namespace="cloud_bridge",
    )

    result = dict(changed=False)

    if resource_helper.is_delete_using_name():
        result = resource_helper.delete_using_name()
    elif resource_helper.is_delete():
        result = resource_helper.delete()
    elif resource_helper.is_update_using_name():
        result = resource_helper.update_using_name()
    elif resource_helper.is_update():
        result = resource_helper.update()
    elif resource_helper.is_create():
        result = resource_helper.create()

    module.exit_json(**result)


if __name__ == "__main__":
    main()
