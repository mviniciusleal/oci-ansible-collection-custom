#!/usr/bin/python
# Copyright (c) 2020, 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_adm_vulnerability_audit
short_description: Manage a VulnerabilityAudit resource in Oracle Cloud Infrastructure
description:
    - This module allows the user to create, update and delete a VulnerabilityAudit resource in Oracle Cloud Infrastructure
    - For I(state=present), creates a new Vulnerability Audit by providing a tree of Application Dependencies.
    - "This resource has the following action operations in the M(oracle.oci.oci_adm_vulnerability_audit_actions) module: change_compartment."
version_added: "2.9.0"
author: Oracle (@oracle)
options:
    knowledge_base_id:
        description:
            - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Knowledge Base.
            - Required for create using I(state=present).
        type: str
    compartment_id:
        description:
            - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the compartment associated with
              the Vulnerability Audit.
              If compartment identifier is not provided the compartment of the associated Knowledge Base will be used instead.
        type: str
    application_dependencies:
        description:
            - List of Application Dependencies (without vulnerabilities).
        type: list
        elements: dict
        suboptions:
            gav:
                description:
                    - Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
                type: str
                required: true
            node_id:
                description:
                    - Unique identifier of an Application Dependency, for example nodeId1.
                      The nodeId can be generated by assigning a unique id to each application dependency
                      in the tree of application dependencies.
                      Every node, even those who share the same GAV, should have a different nodeId.
                      The preferred way of constructing a nodeId is to assign incremental integers
                      during a breadth first or depth first search.
                      A nodeId can be reused only it refers to the same subtree of application dependencies.
                      (This is not equivalent to referring to the same GAV, that is,
                      a GAV can have multiple transitive dependencies.)
                type: str
                required: true
            application_dependency_node_ids:
                description:
                    - List of Application Dependencies on which this Application Dependency depends, each identified by its nodeId.
                type: list
                elements: str
    build_type:
        description:
            - The type of the build tool.
            - Required for create using I(state=present).
        type: str
    configuration:
        description:
            - ""
        type: dict
        suboptions:
            max_permissible_cvss_v2_score:
                description:
                    - A vulnerable Application Dependency is ignored if the score of its associated Vulnerability is below maxPermissibleCvssV2Score and below
                      maxPermissibleCvssV3Score.
                type: float
            max_permissible_cvss_v3_score:
                description:
                    - A vulnerable Application Dependency is ignored if the score of its associated Vulnerability is below maxPermissibleCvssV2Score and below
                      maxPermissibleCvssV3Score.
                type: float
            exclusions:
                description:
                    - A vulnerable Application Dependency is ignored if its name matches any of the items in `exclusions`.
                type: list
                elements: str
    source:
        description:
            - ""
        type: dict
        suboptions:
            oci_resource_id:
                description:
                    - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the OCI resource that
                      triggered the Vulnerability Audit.
                    - Required when type is 'OCI_RESOURCE'
                type: str
            type:
                description:
                    - Source type of the Vulnerability Audit.
                type: str
                choices:
                    - "UNKNOWN"
                    - "OCI_RESOURCE"
                    - "EXTERNAL_RESOURCE"
                required: true
            description:
                description:
                    - Description of the external resource source.
                    - Applicable when type is 'EXTERNAL_RESOURCE'
                type: str
    display_name:
        description:
            - The name of the Vulnerability Audit.
            - Required for create, update, delete when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
            - This parameter is updatable when C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["name"]
    freeform_tags:
        description:
            - "Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
              Example: `{\\"bar-key\\": \\"value\\"}`"
            - This parameter is updatable.
        type: dict
    defined_tags:
        description:
            - "Defined tags for this resource. Each key is predefined and scoped to a namespace.
              Example: `{\\"foo-namespace\\": {\\"bar-key\\": \\"value\\"}}`"
            - This parameter is updatable.
        type: dict
    vulnerability_audit_id:
        description:
            - Unique Vulnerability Audit identifier path parameter.
            - Required for update using I(state=present) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
            - Required for delete using I(state=absent) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["id"]
    state:
        description:
            - The state of the VulnerabilityAudit.
            - Use I(state=present) to create or update a VulnerabilityAudit.
            - Use I(state=absent) to delete a VulnerabilityAudit.
        type: str
        required: false
        default: 'present'
        choices: ["present", "absent"]
extends_documentation_fragment: [ oracle.oci.oracle, oracle.oci.oracle_creatable_resource, oracle.oci.oracle_wait_options ]
"""

EXAMPLES = """
- name: Create vulnerability_audit
  oci_adm_vulnerability_audit:
    # required
    knowledge_base_id: "ocid1.knowledgebase.oc1..xxxxxxEXAMPLExxxxxx"
    build_type: build_type_example

    # optional
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    application_dependencies:
    - # required
      gav: gav_example
      node_id: "ocid1.node.oc1..xxxxxxEXAMPLExxxxxx"

      # optional
      application_dependency_node_ids: [ "application_dependency_node_ids_example" ]
    configuration:
      # optional
      max_permissible_cvss_v2_score: 3.4
      max_permissible_cvss_v3_score: 3.4
      exclusions: [ "exclusions_example" ]
    source:
      # required
      type: UNKNOWN
    display_name: display_name_example
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Update vulnerability_audit
  oci_adm_vulnerability_audit:
    # required
    vulnerability_audit_id: "ocid1.vulnerabilityaudit.oc1..xxxxxxEXAMPLExxxxxx"

    # optional
    display_name: display_name_example
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Update vulnerability_audit using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_adm_vulnerability_audit:
    # required
    display_name: display_name_example

    # optional
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Delete vulnerability_audit
  oci_adm_vulnerability_audit:
    # required
    vulnerability_audit_id: "ocid1.vulnerabilityaudit.oc1..xxxxxxEXAMPLExxxxxx"
    state: absent

- name: Delete vulnerability_audit using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_adm_vulnerability_audit:
    # required
    display_name: display_name_example
    state: absent

"""

RETURN = """
vulnerability_audit:
    description:
        - Details of the VulnerabilityAudit resource acted upon by the current operation
    returned: on success
    type: complex
    contains:
        id:
            description:
                - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Vulnerability Audit.
            returned: on success
            type: str
            sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
        display_name:
            description:
                - The name of the Vulnerability Audit.
            returned: on success
            type: str
            sample: display_name_example
        knowledge_base_id:
            description:
                - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Knowledge Base.
            returned: on success
            type: str
            sample: "ocid1.knowledgebase.oc1..xxxxxxEXAMPLExxxxxx"
        time_created:
            description:
                - The creation date and time of the Vulnerability Audit (formatted according to L(RFC3339,https://datatracker.ietf.org/doc/html/rfc3339)).
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        time_updated:
            description:
                - The update date and time of the Vulnerability Audit (formatted according to L(RFC3339,https://datatracker.ietf.org/doc/html/rfc3339)).
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        lifecycle_state:
            description:
                - The current lifecycle state of the Vulnerability Audit.
            returned: on success
            type: str
            sample: ACTIVE
        vulnerabilities:
            description:
                - List of vulnerabilities found in the Vulnerability Audit.
            returned: on success
            type: complex
            contains:
                id:
                    description:
                        - Unique vulnerability identifier, e.g. CVE-1999-0067.
                    returned: on success
                    type: str
                    sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
                cvss_v2_score:
                    description:
                        - Common Vulnerability Scoring System (CVSS) Version 2.
                    returned: on success
                    type: float
                    sample: 3.4
                cvss_v3_score:
                    description:
                        - Common Vulnerability Scoring System (CVSS) Version 3.
                    returned: on success
                    type: float
                    sample: 3.4
                is_ignored:
                    description:
                        - Indicates if the vulnerability was ignored according to the audit configuration.
                    returned: on success
                    type: bool
                    sample: true
        max_observed_cvss_v2_score:
            description:
                - Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable Application Dependencies.
            returned: on success
            type: float
            sample: 3.4
        max_observed_cvss_v3_score:
            description:
                - Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable Application Dependencies.
            returned: on success
            type: float
            sample: 3.4
        max_observed_cvss_v2_score_with_ignored:
            description:
                - Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable Application Dependencies including ignored ones.
            returned: on success
            type: float
            sample: 3.4
        max_observed_cvss_v3_score_with_ignored:
            description:
                - Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable Application Dependencies including ignored ones.
            returned: on success
            type: float
            sample: 3.4
        vulnerable_artifacts_count_with_ignored:
            description:
                - Count of all vulnerable Application Dependencies.
            returned: on success
            type: int
            sample: 56
        vulnerable_artifacts_count:
            description:
                - Count of non-ignored vulnerable Application Dependencies.
            returned: on success
            type: int
            sample: 56
        configuration:
            description:
                - ""
            returned: on success
            type: complex
            contains:
                max_permissible_cvss_v2_score:
                    description:
                        - A vulnerable Application Dependency is ignored if the score of its associated Vulnerability is below maxPermissibleCvssV2Score and
                          below maxPermissibleCvssV3Score.
                    returned: on success
                    type: float
                    sample: 3.4
                max_permissible_cvss_v3_score:
                    description:
                        - A vulnerable Application Dependency is ignored if the score of its associated Vulnerability is below maxPermissibleCvssV2Score and
                          below maxPermissibleCvssV3Score.
                    returned: on success
                    type: float
                    sample: 3.4
                exclusions:
                    description:
                        - A vulnerable Application Dependency is ignored if its name matches any of the items in `exclusions`.
                    returned: on success
                    type: list
                    sample: []
        is_success:
            description:
                - Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
            returned: on success
            type: bool
            sample: true
        build_type:
            description:
                - The type of the build tool.
            returned: on success
            type: str
            sample: MAVEN
        source:
            description:
                - ""
            returned: on success
            type: complex
            contains:
                description:
                    description:
                        - Description of the external resource source.
                    returned: on success
                    type: str
                    sample: description_example
                oci_resource_id:
                    description:
                        - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the OCI resource that
                          triggered the Vulnerability Audit.
                    returned: on success
                    type: str
                    sample: "ocid1.ociresource.oc1..xxxxxxEXAMPLExxxxxx"
                type:
                    description:
                        - Source type of the Vulnerability Audit.
                    returned: on success
                    type: str
                    sample: EXTERNAL_RESOURCE
        compartment_id:
            description:
                - The Oracle Cloud identifier (L(OCID,https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the compartment associated
                  with the Vulnerability Audit.
            returned: on success
            type: str
            sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
        freeform_tags:
            description:
                - "Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
                  Example: `{\\"bar-key\\": \\"value\\"}`"
            returned: on success
            type: dict
            sample: {'Department': 'Finance'}
        defined_tags:
            description:
                - "Defined tags for this resource. Each key is predefined and scoped to a namespace.
                  Example: `{\\"foo-namespace\\": {\\"bar-key\\": \\"value\\"}}`"
            returned: on success
            type: dict
            sample: {'Operations': {'CostCenter': 'US'}}
        system_tags:
            description:
                - "Usage of system tag keys. These predefined keys are scoped to namespaces.
                  Example: `{\\"orcl-cloud\\": {\\"free-tier-retained\\": \\"true\\"}}`"
            returned: on success
            type: dict
            sample: {}
    sample: {
        "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
        "display_name": "display_name_example",
        "knowledge_base_id": "ocid1.knowledgebase.oc1..xxxxxxEXAMPLExxxxxx",
        "time_created": "2013-10-20T19:20:30+01:00",
        "time_updated": "2013-10-20T19:20:30+01:00",
        "lifecycle_state": "ACTIVE",
        "vulnerabilities": [{
            "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
            "cvss_v2_score": 3.4,
            "cvss_v3_score": 3.4,
            "is_ignored": true
        }],
        "max_observed_cvss_v2_score": 3.4,
        "max_observed_cvss_v3_score": 3.4,
        "max_observed_cvss_v2_score_with_ignored": 3.4,
        "max_observed_cvss_v3_score_with_ignored": 3.4,
        "vulnerable_artifacts_count_with_ignored": 56,
        "vulnerable_artifacts_count": 56,
        "configuration": {
            "max_permissible_cvss_v2_score": 3.4,
            "max_permissible_cvss_v3_score": 3.4,
            "exclusions": []
        },
        "is_success": true,
        "build_type": "MAVEN",
        "source": {
            "description": "description_example",
            "oci_resource_id": "ocid1.ociresource.oc1..xxxxxxEXAMPLExxxxxx",
            "type": "EXTERNAL_RESOURCE"
        },
        "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
        "freeform_tags": {'Department': 'Finance'},
        "defined_tags": {'Operations': {'CostCenter': 'US'}},
        "system_tags": {}
    }
"""

from ansible_collections.oracle.oci.plugins.module_utils import (
    oci_common_utils,
    oci_wait_utils,
)
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIResourceHelperBase,
    get_custom_class,
    OCIAnsibleModule,
)

try:
    from oci.adm import ApplicationDependencyManagementClient
    from oci.adm.models import CreateVulnerabilityAuditDetails
    from oci.adm.models import UpdateVulnerabilityAuditDetails

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class VulnerabilityAuditHelperGen(OCIResourceHelperBase):
    """Supported operations: create, update, get, list and delete"""

    def get_possible_entity_types(self):
        return super(VulnerabilityAuditHelperGen, self).get_possible_entity_types() + [
            "vulnerabilityaudit",
            "vulnerabilityaudits",
            "admvulnerabilityaudit",
            "admvulnerabilityaudits",
            "vulnerabilityauditresource",
            "vulnerabilityauditsresource",
            "adm",
        ]

    def get_module_resource_id_param(self):
        return "vulnerability_audit_id"

    def get_module_resource_id(self):
        return self.module.params.get("vulnerability_audit_id")

    def get_get_fn(self):
        return self.client.get_vulnerability_audit

    def get_get_model_from_summary_model(self, summary_model):
        return oci_common_utils.call_with_backoff(
            self.client.get_vulnerability_audit,
            vulnerability_audit_id=summary_model.id,
        ).data

    def get_resource(self):
        return oci_common_utils.call_with_backoff(
            self.client.get_vulnerability_audit,
            vulnerability_audit_id=self.module.params.get("vulnerability_audit_id"),
        )

    def get_required_kwargs_for_list(self):
        return dict()

    def get_optional_kwargs_for_list(self):
        optional_list_method_params = [
            "compartment_id",
            "knowledge_base_id",
            "display_name",
        ]

        return dict(
            (param, self.module.params[param])
            for param in optional_list_method_params
            if self.module.params.get(param) is not None
            and (
                self._use_name_as_identifier()
                or (
                    not self.module.params.get("key_by")
                    or param in self.module.params.get("key_by")
                )
            )
        )

    def list_resources(self):

        required_kwargs = self.get_required_kwargs_for_list()
        optional_kwargs = self.get_optional_kwargs_for_list()
        kwargs = oci_common_utils.merge_dicts(required_kwargs, optional_kwargs)
        return oci_common_utils.list_all_resources(
            self.client.list_vulnerability_audits, **kwargs
        )

    def get_create_model_class(self):
        return CreateVulnerabilityAuditDetails

    def get_exclude_attributes(self):
        return ["application_dependencies"]

    def create_resource(self):
        create_details = self.get_create_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.create_vulnerability_audit,
            call_fn_args=(),
            call_fn_kwargs=dict(create_vulnerability_audit_details=create_details,),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.CREATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def get_update_model_class(self):
        return UpdateVulnerabilityAuditDetails

    def update_resource(self):
        update_details = self.get_update_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.update_vulnerability_audit,
            call_fn_args=(),
            call_fn_kwargs=dict(
                vulnerability_audit_id=self.module.params.get("vulnerability_audit_id"),
                update_vulnerability_audit_details=update_details,
            ),
            waiter_type=oci_wait_utils.LIFECYCLE_STATE_WAITER_KEY,
            operation=oci_common_utils.UPDATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=self.get_wait_for_states_for_operation(
                oci_common_utils.UPDATE_OPERATION_KEY,
            ),
        )

    def delete_resource(self):
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.delete_vulnerability_audit,
            call_fn_args=(),
            call_fn_kwargs=dict(
                vulnerability_audit_id=self.module.params.get("vulnerability_audit_id"),
            ),
            waiter_type=oci_wait_utils.LIFECYCLE_STATE_WAITER_KEY,
            operation=oci_common_utils.DELETE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=self.get_wait_for_states_for_operation(
                oci_common_utils.DELETE_OPERATION_KEY,
            ),
        )


VulnerabilityAuditHelperCustom = get_custom_class("VulnerabilityAuditHelperCustom")


class ResourceHelper(VulnerabilityAuditHelperCustom, VulnerabilityAuditHelperGen):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec(
        supports_create=True, supports_wait=True
    )
    module_args.update(
        dict(
            knowledge_base_id=dict(type="str"),
            compartment_id=dict(type="str"),
            application_dependencies=dict(
                type="list",
                elements="dict",
                options=dict(
                    gav=dict(type="str", required=True),
                    node_id=dict(type="str", required=True),
                    application_dependency_node_ids=dict(type="list", elements="str"),
                ),
            ),
            build_type=dict(type="str"),
            configuration=dict(
                type="dict",
                options=dict(
                    max_permissible_cvss_v2_score=dict(type="float"),
                    max_permissible_cvss_v3_score=dict(type="float"),
                    exclusions=dict(type="list", elements="str"),
                ),
            ),
            source=dict(
                type="dict",
                options=dict(
                    oci_resource_id=dict(type="str"),
                    type=dict(
                        type="str",
                        required=True,
                        choices=["UNKNOWN", "OCI_RESOURCE", "EXTERNAL_RESOURCE"],
                    ),
                    description=dict(type="str"),
                ),
            ),
            display_name=dict(aliases=["name"], type="str"),
            freeform_tags=dict(type="dict"),
            defined_tags=dict(type="dict"),
            vulnerability_audit_id=dict(aliases=["id"], type="str"),
            state=dict(type="str", default="present", choices=["present", "absent"]),
        )
    )

    module = OCIAnsibleModule(argument_spec=module_args, supports_check_mode=True)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_helper = ResourceHelper(
        module=module,
        resource_type="vulnerability_audit",
        service_client_class=ApplicationDependencyManagementClient,
        namespace="adm",
    )

    result = dict(changed=False)

    if resource_helper.is_delete_using_name():
        result = resource_helper.delete_using_name()
    elif resource_helper.is_delete():
        result = resource_helper.delete()
    elif resource_helper.is_update_using_name():
        result = resource_helper.update_using_name()
    elif resource_helper.is_update():
        result = resource_helper.update()
    elif resource_helper.is_create():
        result = resource_helper.create()

    module.exit_json(**result)


if __name__ == "__main__":
    main()
