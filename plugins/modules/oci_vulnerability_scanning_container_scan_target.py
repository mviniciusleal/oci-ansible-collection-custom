#!/usr/bin/python
# Copyright (c) 2020, 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_vulnerability_scanning_container_scan_target
short_description: Manage a ContainerScanTarget resource in Oracle Cloud Infrastructure
description:
    - This module allows the user to create, update and delete a ContainerScanTarget resource in Oracle Cloud Infrastructure
    - For I(state=present), creates a new ContainerScanTarget. A container scan target specifies a group of one or more Docker image repositories in Oracle
      Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
    - "This resource has the following action operations in the M(oracle.oci.oci_vulnerability_scanning_container_scan_target_actions) module:
      change_compartment."
version_added: "2.9.0"
author: Oracle (@oracle)
options:
    compartment_id:
        description:
            - The L(OCID,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan target's compartment
            - Required for create using I(state=present).
            - Required for update when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
            - Required for delete when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
        type: str
    display_name:
        description:
            - User friendly name of container scan target. If not present, will be auto-generated.
            - Required for create, update, delete when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is set.
            - This parameter is updatable when C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["name"]
    description:
        description:
            - Target description.
            - This parameter is updatable.
        type: str
    target_registry:
        description:
            - ""
            - Required for create using I(state=present).
            - This parameter is updatable.
        type: dict
        suboptions:
            type:
                description:
                    - The scan level
                    - This parameter is updatable.
                type: str
                choices:
                    - "OCIR"
                required: true
            url:
                description:
                    - URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
                    - This parameter is updatable.
                type: str
            compartment_id:
                description:
                    - The L(OCID,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All
                      listed repositories must be in the compartment.
                    - This parameter is updatable.
                    - Applicable when type is 'OCIR'
                type: str
            repositories:
                description:
                    - List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
                    - This parameter is updatable.
                type: list
                elements: str
    container_scan_recipe_id:
        description:
            - ID of the container scan recipe this target applies.
            - Required for create using I(state=present).
            - This parameter is updatable.
        type: str
    freeform_tags:
        description:
            - "Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
              Example: `{\\"bar-key\\": \\"value\\"}`"
            - This parameter is updatable.
        type: dict
    defined_tags:
        description:
            - "Defined tags for this resource. Each key is predefined and scoped to a namespace.
              Example: `{\\"foo-namespace\\": {\\"bar-key\\": \\"value\\"}}`"
            - This parameter is updatable.
        type: dict
    container_scan_target_id:
        description:
            - unique ContainerScanTarget identifier
            - Required for update using I(state=present) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
            - Required for delete using I(state=absent) when environment variable C(OCI_USE_NAME_AS_IDENTIFIER) is not set.
        type: str
        aliases: ["id"]
    state:
        description:
            - The state of the ContainerScanTarget.
            - Use I(state=present) to create or update a ContainerScanTarget.
            - Use I(state=absent) to delete a ContainerScanTarget.
        type: str
        required: false
        default: 'present'
        choices: ["present", "absent"]
extends_documentation_fragment: [ oracle.oci.oracle, oracle.oci.oracle_creatable_resource, oracle.oci.oracle_wait_options ]
"""

EXAMPLES = """
- name: Create container_scan_target
  oci_vulnerability_scanning_container_scan_target:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    target_registry:
      # required
      type: OCIR
      compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"

      # optional
      url: url_example
      repositories: [ "repositories_example" ]
    container_scan_recipe_id: "ocid1.containerscanrecipe.oc1..xxxxxxEXAMPLExxxxxx"

    # optional
    display_name: display_name_example
    description: description_example
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Update container_scan_target
  oci_vulnerability_scanning_container_scan_target:
    # required
    container_scan_target_id: "ocid1.containerscantarget.oc1..xxxxxxEXAMPLExxxxxx"

    # optional
    display_name: display_name_example
    description: description_example
    target_registry:
      # required
      type: OCIR
      compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"

      # optional
      url: url_example
      repositories: [ "repositories_example" ]
    container_scan_recipe_id: "ocid1.containerscanrecipe.oc1..xxxxxxEXAMPLExxxxxx"
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Update container_scan_target using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_vulnerability_scanning_container_scan_target:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    display_name: display_name_example

    # optional
    description: description_example
    target_registry:
      # required
      type: OCIR
      compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"

      # optional
      url: url_example
      repositories: [ "repositories_example" ]
    container_scan_recipe_id: "ocid1.containerscanrecipe.oc1..xxxxxxEXAMPLExxxxxx"
    freeform_tags: {'Department': 'Finance'}
    defined_tags: {'Operations': {'CostCenter': 'US'}}

- name: Delete container_scan_target
  oci_vulnerability_scanning_container_scan_target:
    # required
    container_scan_target_id: "ocid1.containerscantarget.oc1..xxxxxxEXAMPLExxxxxx"
    state: absent

- name: Delete container_scan_target using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_vulnerability_scanning_container_scan_target:
    # required
    compartment_id: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
    display_name: display_name_example
    state: absent

"""

RETURN = """
container_scan_target:
    description:
        - Details of the ContainerScanTarget resource acted upon by the current operation
    returned: on success
    type: complex
    contains:
        id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan target. Immutable and generated on
                  creation.
            returned: on success
            type: str
            sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
        display_name:
            description:
                - User friendly name of container scan target
            returned: on success
            type: str
            sample: display_name_example
        description:
            description:
                - Target description.
            returned: on success
            type: str
            sample: description_example
        compartment_id:
            description:
                - The L(OCID,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan target's compartment
            returned: on success
            type: str
            sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
        target_registry:
            description:
                - ""
            returned: on success
            type: complex
            contains:
                type:
                    description:
                        - The scan level
                    returned: on success
                    type: str
                    sample: OCIR
                url:
                    description:
                        - URL of the registry.
                    returned: on success
                    type: str
                    sample: url_example
                compartment_id:
                    description:
                        - The L(OCID,https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in.
                          All listed repositories must be in the compartment.
                    returned: on success
                    type: str
                    sample: "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx"
                repositories:
                    description:
                        - List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
                    returned: on success
                    type: list
                    sample: []
        container_scan_recipe_id:
            description:
                - ID of the container scan recipe this target applies.
            returned: on success
            type: str
            sample: "ocid1.containerscanrecipe.oc1..xxxxxxEXAMPLExxxxxx"
        lifecycle_state:
            description:
                - The current state of the config.
            returned: on success
            type: str
            sample: CREATING
        time_created:
            description:
                - Date and time the target was created, format as described in L(RFC 3339,https://tools.ietf.org/rfc/rfc3339)
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        time_updated:
            description:
                - Date and time the target was last updated, format as described in L(RFC 3339,https://tools.ietf.org/rfc/rfc3339)
            returned: on success
            type: str
            sample: "2013-10-20T19:20:30+01:00"
        freeform_tags:
            description:
                - "Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
                  Example: `{\\"bar-key\\": \\"value\\"}`"
            returned: on success
            type: dict
            sample: {'Department': 'Finance'}
        defined_tags:
            description:
                - "Defined tags for this resource. Each key is predefined and scoped to a namespace.
                  Example: `{\\"foo-namespace\\": {\\"bar-key\\": \\"value\\"}}`"
            returned: on success
            type: dict
            sample: {'Operations': {'CostCenter': 'US'}}
        system_tags:
            description:
                - "Usage of system tag keys. These predefined keys are scoped to namespaces.
                  Example: `{\\"orcl-cloud\\": {\\"free-tier-retained\\": \\"true\\"}}`"
            returned: on success
            type: dict
            sample: {}
    sample: {
        "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
        "display_name": "display_name_example",
        "description": "description_example",
        "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
        "target_registry": {
            "type": "OCIR",
            "url": "url_example",
            "compartment_id": "ocid1.compartment.oc1..xxxxxxEXAMPLExxxxxx",
            "repositories": []
        },
        "container_scan_recipe_id": "ocid1.containerscanrecipe.oc1..xxxxxxEXAMPLExxxxxx",
        "lifecycle_state": "CREATING",
        "time_created": "2013-10-20T19:20:30+01:00",
        "time_updated": "2013-10-20T19:20:30+01:00",
        "freeform_tags": {'Department': 'Finance'},
        "defined_tags": {'Operations': {'CostCenter': 'US'}},
        "system_tags": {}
    }
"""

from ansible_collections.oracle.oci.plugins.module_utils import (
    oci_common_utils,
    oci_wait_utils,
)
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIResourceHelperBase,
    get_custom_class,
    OCIAnsibleModule,
)

try:
    from oci.vulnerability_scanning import VulnerabilityScanningClient
    from oci.vulnerability_scanning.models import CreateContainerScanTargetDetails
    from oci.vulnerability_scanning.models import UpdateContainerScanTargetDetails

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class ContainerScanTargetHelperGen(OCIResourceHelperBase):
    """Supported operations: create, update, get, list and delete"""

    def get_possible_entity_types(self):
        return super(ContainerScanTargetHelperGen, self).get_possible_entity_types() + [
            "containerscantarget",
            "containerscantargets",
            "vulnerabilityScanningcontainerscantarget",
            "vulnerabilityScanningcontainerscantargets",
            "containerscantargetresource",
            "containerscantargetsresource",
            "vulnerabilityscanning",
        ]

    def get_module_resource_id_param(self):
        return "container_scan_target_id"

    def get_module_resource_id(self):
        return self.module.params.get("container_scan_target_id")

    def get_get_fn(self):
        return self.client.get_container_scan_target

    def get_get_model_from_summary_model(self, summary_model):
        return oci_common_utils.call_with_backoff(
            self.client.get_container_scan_target,
            container_scan_target_id=summary_model.id,
        ).data

    def get_resource(self):
        return oci_common_utils.call_with_backoff(
            self.client.get_container_scan_target,
            container_scan_target_id=self.module.params.get("container_scan_target_id"),
        )

    def get_required_kwargs_for_list(self):
        required_list_method_params = [
            "compartment_id",
        ]

        return dict(
            (param, self.module.params[param]) for param in required_list_method_params
        )

    def get_optional_kwargs_for_list(self):
        optional_list_method_params = ["display_name"]

        return dict(
            (param, self.module.params[param])
            for param in optional_list_method_params
            if self.module.params.get(param) is not None
            and (
                self._use_name_as_identifier()
                or (
                    not self.module.params.get("key_by")
                    or param in self.module.params.get("key_by")
                )
            )
        )

    def list_resources(self):

        required_kwargs = self.get_required_kwargs_for_list()
        optional_kwargs = self.get_optional_kwargs_for_list()
        kwargs = oci_common_utils.merge_dicts(required_kwargs, optional_kwargs)
        return oci_common_utils.list_all_resources(
            self.client.list_container_scan_targets, **kwargs
        )

    def get_create_model_class(self):
        return CreateContainerScanTargetDetails

    def create_resource(self):
        create_details = self.get_create_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.create_container_scan_target,
            call_fn_args=(),
            call_fn_kwargs=dict(create_container_scan_target_details=create_details,),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.CREATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def get_update_model_class(self):
        return UpdateContainerScanTargetDetails

    def update_resource(self):
        update_details = self.get_update_model()
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.update_container_scan_target,
            call_fn_args=(),
            call_fn_kwargs=dict(
                container_scan_target_id=self.module.params.get(
                    "container_scan_target_id"
                ),
                update_container_scan_target_details=update_details,
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.UPDATE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )

    def delete_resource(self):
        return oci_wait_utils.call_and_wait(
            call_fn=self.client.delete_container_scan_target,
            call_fn_args=(),
            call_fn_kwargs=dict(
                container_scan_target_id=self.module.params.get(
                    "container_scan_target_id"
                ),
            ),
            waiter_type=oci_wait_utils.WORK_REQUEST_WAITER_KEY,
            operation=oci_common_utils.DELETE_OPERATION_KEY,
            waiter_client=self.get_waiter_client(),
            resource_helper=self,
            wait_for_states=oci_common_utils.get_work_request_completed_states(),
        )


ContainerScanTargetHelperCustom = get_custom_class("ContainerScanTargetHelperCustom")


class ResourceHelper(ContainerScanTargetHelperCustom, ContainerScanTargetHelperGen):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec(
        supports_create=True, supports_wait=True
    )
    module_args.update(
        dict(
            compartment_id=dict(type="str"),
            display_name=dict(aliases=["name"], type="str"),
            description=dict(type="str"),
            target_registry=dict(
                type="dict",
                options=dict(
                    type=dict(type="str", required=True, choices=["OCIR"]),
                    url=dict(type="str"),
                    compartment_id=dict(type="str"),
                    repositories=dict(type="list", elements="str"),
                ),
            ),
            container_scan_recipe_id=dict(type="str"),
            freeform_tags=dict(type="dict"),
            defined_tags=dict(type="dict"),
            container_scan_target_id=dict(aliases=["id"], type="str"),
            state=dict(type="str", default="present", choices=["present", "absent"]),
        )
    )

    module = OCIAnsibleModule(argument_spec=module_args, supports_check_mode=True)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_helper = ResourceHelper(
        module=module,
        resource_type="container_scan_target",
        service_client_class=VulnerabilityScanningClient,
        namespace="vulnerability_scanning",
    )

    result = dict(changed=False)

    if resource_helper.is_delete_using_name():
        result = resource_helper.delete_using_name()
    elif resource_helper.is_delete():
        result = resource_helper.delete()
    elif resource_helper.is_update_using_name():
        result = resource_helper.update_using_name()
    elif resource_helper.is_update():
        result = resource_helper.update()
    elif resource_helper.is_create():
        result = resource_helper.create()

    module.exit_json(**result)


if __name__ == "__main__":
    main()
